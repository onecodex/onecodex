"""
Script to generate Pydantic models from One Codex OpenAPI specification.

This script downloads the OpenAPI spec and generates base Pydantic models
that will be extended with One Codex-specific functionality.
"""

import subprocess
import sys
from pathlib import Path


def generate_models():
    """Generate Pydantic models from OpenAPI spec."""

    # Define paths
    project_root = Path(__file__).parent.parent
    models_dir = project_root / "onecodex" / "models"
    generated_file = models_dir / "generated.py"

    # Create models directory if it doesn't exist
    models_dir.mkdir(exist_ok=True)

    # Run datamodel-codegen
    cmd = [
        "datamodel-codegen",
        "--url",
        "https://app.onecodex.com/openapi.json",
        "--output",
        str(generated_file),
        "--output-model-type",
        "pydantic_v2.BaseModel",
        "--input-file-type",
        "openapi",
        "--field-constraints",
        "--target-python-version",
        "3.9",
    ]

    print("Generating Pydantic models from OpenAPI spec...")
    print(f"Command: {' '.join(cmd)}")

    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print(f"✓ Models generated successfully at {generated_file}")

        if result.stdout:
            print("Output:", result.stdout)
        if result.stderr:
            print("Warnings:", result.stderr)

    except subprocess.CalledProcessError as e:
        print(f"✗ Error generating models: {e}")
        if e.stdout:
            print("Output:", e.stdout)
        if e.stderr:
            print("Error:", e.stderr)
        sys.exit(1)

    # Add header comment to generated file
    add_header_comment(generated_file)

    print("\nNext steps:")
    print("1. Review the generated models in onecodex/models/generated.py")
    print("2. Create model extensions for One Codex-specific functionality")
    print("3. Update imports in __init__.py")


def add_header_comment(file_path):
    """Add a header comment to the generated file."""

    header = '''"""
Auto-generated Pydantic models from One Codex OpenAPI specification.

DO NOT EDIT THIS FILE DIRECTLY!

This file is automatically generated from the OpenAPI spec at:
https://app.onecodex.com/openapi.json

To regenerate these models, run:
    python scripts/generate_models.py

For One Codex-specific extensions and functionality, see the other
files in the models/ directory.
"""

'''

    # Read the existing content
    with open(file_path, "r") as f:
        content = f.read()

    # Find where to insert the header (after the initial comment)
    lines = content.split("\n")
    insert_index = 0

    # Skip initial generated comment
    for i, line in enumerate(lines):
        if line.startswith("from __future__"):
            insert_index = i
            break

    # Insert header
    lines.insert(insert_index, header)

    # Write back
    with open(file_path, "w") as f:
        f.write("\n".join(lines))


if __name__ == "__main__":
    generate_models()
